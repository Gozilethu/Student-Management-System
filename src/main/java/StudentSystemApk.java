
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.border.BevelBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author user pc
 */
public class StudentSystemApk extends javax.swing.JFrame {

    /**
     * Creates new form StudentSystemApk
     */
    public StudentSystemApk() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        studentManagementSystem = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtstudentID1 = new javax.swing.JTextField();
        txtname1 = new javax.swing.JTextField();
        txtage1 = new javax.swing.JTextField();
        txtgrade1 = new javax.swing.JTextField();
        txtmajor1 = new javax.swing.JTextField();
        studentIDremove = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        displayBtn = new javax.swing.JButton();
        exitBtn = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        AddBtn = new javax.swing.JButton();
        removeBtn = new javax.swing.JButton();
        exitBtn1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        AddBtn1 = new javax.swing.JButton();
        removeBtn1 = new javax.swing.JButton();
        displayBtn1 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        studentManagementSystem1 = new javax.swing.JLabel();
        refreshBtn = new javax.swing.JButton();
        updateBtn1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(236, 231, 231));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                jPanel1AncestorResized(evt);
            }
        });
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        studentManagementSystem.setBackground(new java.awt.Color(236, 231, 231));
        studentManagementSystem.setFont(new java.awt.Font("Gadugi", 1, 14)); // NOI18N
        studentManagementSystem.setForeground(new java.awt.Color(236, 231, 231));
        studentManagementSystem.setText("STUDENT MANAGEMENT SYSTEM");
        jPanel1.add(studentManagementSystem, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setText("Remove Student");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 300, -1, -1));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setText("Add Student");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(159, 78, -1, -1));

        txtstudentID1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtstudentID1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtstudentID1ActionPerformed(evt);
            }
        });
        txtstudentID1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtstudentID1KeyPressed(evt);
            }
        });
        jPanel1.add(txtstudentID1, new org.netbeans.lib.awtextra.AbsoluteConstraints(94, 101, 234, -1));

        txtname1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtname1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtname1ActionPerformed(evt);
            }
        });
        txtname1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtname1KeyPressed(evt);
            }
        });
        jPanel1.add(txtname1, new org.netbeans.lib.awtextra.AbsoluteConstraints(94, 135, 234, -1));

        txtage1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtage1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtage1ActionPerformed(evt);
            }
        });
        txtage1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtage1KeyPressed(evt);
            }
        });
        jPanel1.add(txtage1, new org.netbeans.lib.awtextra.AbsoluteConstraints(94, 167, 234, -1));

        txtgrade1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtgrade1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtgrade1ActionPerformed(evt);
            }
        });
        txtgrade1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtgrade1KeyPressed(evt);
            }
        });
        jPanel1.add(txtgrade1, new org.netbeans.lib.awtextra.AbsoluteConstraints(94, 199, 234, -1));

        txtmajor1.setFont(new java.awt.Font("Segoe UI", 0, 1)); // NOI18N
        txtmajor1.setBorder(null);
        txtmajor1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtmajor1ActionPerformed(evt);
            }
        });
        txtmajor1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtmajor1KeyPressed(evt);
            }
        });
        jPanel1.add(txtmajor1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 20, 0, 30));

        studentIDremove.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        studentIDremove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentIDremoveActionPerformed(evt);
            }
        });
        studentIDremove.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                studentIDremoveKeyPressed(evt);
            }
        });
        jPanel1.add(studentIDremove, new org.netbeans.lib.awtextra.AbsoluteConstraints(94, 359, 234, -1));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Student ID");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 103, -1, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Name");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 137, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Age");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 169, -1, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Grade");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 201, -1, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Major");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 231, -1, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("Student ID");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 361, -1, -1));

        jTable1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Age", "Grade", "Major"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 101, -1, 278));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel10.setText("Display All Students");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(569, 78, -1, -1));

        displayBtn.setBackground(new java.awt.Color(204, 204, 204));
        displayBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        displayBtn.setText("Display");
        jPanel1.add(displayBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(389, 211, -1, -1));

        exitBtn.setBackground(new java.awt.Color(204, 204, 204));
        exitBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        exitBtn.setText("Exit");
        jPanel1.add(exitBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(389, 211, -1, -1));

        jButton3.setBackground(new java.awt.Color(204, 204, 204));
        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton3.setText("Clear");
        jButton3.setName("clearBtn"); // NOI18N
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(389, 211, -1, -1));

        AddBtn.setBackground(new java.awt.Color(204, 204, 204));
        AddBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        AddBtn.setText("Add");
        jPanel1.add(AddBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(389, 211, -1, -1));

        removeBtn.setBackground(new java.awt.Color(204, 204, 204));
        removeBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        removeBtn.setText("Remove");
        jPanel1.add(removeBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(386, 211, -1, -1));

        exitBtn1.setBackground(new java.awt.Color(204, 204, 204));
        exitBtn1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        exitBtn1.setText("Exit");
        exitBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtn1ActionPerformed(evt);
            }
        });
        jPanel1.add(exitBtn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 11, -1, -1));

        jButton4.setBackground(new java.awt.Color(204, 204, 204));
        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton4.setText("Clear");
        jButton4.setName("clearBtn"); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 420, 80, -1));

        AddBtn1.setBackground(new java.awt.Color(204, 204, 204));
        AddBtn1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        AddBtn1.setText("Add");
        AddBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBtn1ActionPerformed(evt);
            }
        });
        jPanel1.add(AddBtn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 420, 80, -1));

        removeBtn1.setBackground(new java.awt.Color(204, 204, 204));
        removeBtn1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        removeBtn1.setText("Remove");
        removeBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtn1ActionPerformed(evt);
            }
        });
        jPanel1.add(removeBtn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 420, -1, -1));

        displayBtn1.setBackground(new java.awt.Color(204, 204, 204));
        displayBtn1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        displayBtn1.setText("Display");
        displayBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayBtn1ActionPerformed(evt);
            }
        });
        jPanel1.add(displayBtn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 420, 80, -1));

        jButton1.setBackground(new java.awt.Color(204, 204, 204));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setText("Home");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(682, 11, -1, -1));

        jComboBox1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Software Development", "Software Engineering", "Artificial Intelligence", "Machine Learning", "Cybersecurity", "Network Engineering", "Robotics engineering" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jPanel1.add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 230, 240, -1));

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        jLabel11.setText("Copyright 2023 Suicide Squad, All rights reserved. ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(298, Short.MAX_VALUE)
                .addComponent(jLabel11)
                .addGap(269, 269, 269))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel11)
                .addGap(0, 4, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 460, 830, 20));

        studentManagementSystem1.setFont(new java.awt.Font("Gadugi", 1, 14)); // NOI18N
        studentManagementSystem1.setText("STUDENT MANAGEMENT SYSTEM");
        jPanel1.add(studentManagementSystem1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        refreshBtn.setBackground(new java.awt.Color(204, 204, 204));
        refreshBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        refreshBtn.setText("Refresh");
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });
        jPanel1.add(refreshBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 420, 80, -1));

        updateBtn1.setBackground(new java.awt.Color(204, 204, 204));
        updateBtn1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        updateBtn1.setText("Update");
        updateBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtn1ActionPerformed(evt);
            }
        });
        jPanel1.add(updateBtn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 420, 80, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 850, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtstudentID1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtstudentID1ActionPerformed
        
    }//GEN-LAST:event_txtstudentID1ActionPerformed

    private void txtstudentID1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtstudentID1KeyPressed

        /*This method is an event handler for the "keyPressed" event of the "txtstudentID1" text field.
        It restricts the input length to a maximum of 8 characters by implementing a DocumentFilter.*/
        
        DocumentFilter filter = new DocumentFilter() {
            @Override
            public void insertString(DocumentFilter.FilterBypass fb, int offset, String text, AttributeSet attrs)
                    throws BadLocationException {
                if ((fb.getDocument().getLength() + text.length()) > 8) {
                    return;
                }
                super.insertString(fb, offset, text, attrs);
            }

            @Override
            public void replace(DocumentFilter.FilterBypass fb, int offset, int length, String text, AttributeSet attrs)
                    throws BadLocationException {
                if ((fb.getDocument().getLength() - length + text.length()) > 8) {
                    return; 
                }
                super.replace(fb, offset, length, text, attrs);
            }
        };

        JTextField textField = (JTextField) evt.getSource();
        AbstractDocument doc = (AbstractDocument) textField.getDocument();
        doc.setDocumentFilter(filter);
        
    }//GEN-LAST:event_txtstudentID1KeyPressed

    private void txtname1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtname1ActionPerformed

    }//GEN-LAST:event_txtname1ActionPerformed

    private void txtname1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtname1KeyPressed

    }//GEN-LAST:event_txtname1KeyPressed

    private void txtage1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtage1ActionPerformed
    
    }//GEN-LAST:event_txtage1ActionPerformed

    private void txtage1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtage1KeyPressed
      
        /*This method is an event handler for the "keyPressed" event of the "txtage1" text field.
        It limits the input length to a maximum of 2 characters by implementing a DocumentFilter.*/
        
        DocumentFilter filter = new DocumentFilter() {
            @Override
            public void insertString(DocumentFilter.FilterBypass fb, int offset, String text, AttributeSet attrs)
                    throws BadLocationException {
                if ((fb.getDocument().getLength() + text.length()) > 2) {
                    return; 
                }
                super.insertString(fb, offset, text, attrs);
            }

            @Override
            public void replace(DocumentFilter.FilterBypass fb, int offset, int length, String text, AttributeSet attrs)
                    throws BadLocationException {
                if ((fb.getDocument().getLength() - length + text.length()) > 2) {
                    return; 
                }
                super.replace(fb, offset, length, text, attrs);
            }
        };

        JTextField textField = (JTextField) evt.getSource();
        AbstractDocument doc = (AbstractDocument) textField.getDocument();
        doc.setDocumentFilter(filter);
        
    }//GEN-LAST:event_txtage1KeyPressed

    private void txtgrade1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtgrade1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtgrade1ActionPerformed

    private void txtgrade1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtgrade1KeyPressed
   
        /*This method is an event handler for the "keyPressed" event of the "txtgrade1" text field.
        It implements a DocumentFilter to restrict the input to valid integer values within a range of 0 to 100.*/
        
        DocumentFilter filter = new DocumentFilter() {
            @Override
            public void insertString(DocumentFilter.FilterBypass fb, int offset, String text, AttributeSet attrs)
                    throws BadLocationException {

                String currentText = fb.getDocument().getText(0, fb.getDocument().getLength());
                String newText = currentText.substring(0, offset) + text + currentText.substring(offset);
                try {
                    int value = Integer.parseInt(newText);
                    if (value > 100) {
                        return; 
                    }
                } catch (NumberFormatException e) {
                    return; 
                }
                super.insertString(fb, offset, text, attrs);
            }

            @Override
            public void replace(DocumentFilter.FilterBypass fb, int offset, int length, String text, AttributeSet attrs)
                    throws BadLocationException {

                String currentText = fb.getDocument().getText(0, fb.getDocument().getLength());
                String newText = currentText.substring(0, offset) + text + currentText.substring(offset + length);
                try {
                    int value = Integer.parseInt(newText);
                    if (value > 100) {
                        return; 
                    }
                } catch (NumberFormatException e) {
                    return; 
                }
                super.replace(fb, offset, length, text, attrs);
            }
        };


        JTextField textField = (JTextField) evt.getSource();
        AbstractDocument doc = (AbstractDocument) textField.getDocument();
        doc.setDocumentFilter(filter);
    }//GEN-LAST:event_txtgrade1KeyPressed

    private void txtmajor1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtmajor1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtmajor1ActionPerformed

    private void txtmajor1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtmajor1KeyPressed
      
    }//GEN-LAST:event_txtmajor1KeyPressed

    private void studentIDremoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentIDremoveActionPerformed

    }//GEN-LAST:event_studentIDremoveActionPerformed

    private void studentIDremoveKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_studentIDremoveKeyPressed
        
        /*This method is an event handler for the "keyPressed" event of the "studentIDremove" text field.
        It limits the input length to a maximum of 8 characters by implementing a DocumentFilter.*/
        
        DocumentFilter filter = new DocumentFilter() {
            @Override
            public void insertString(DocumentFilter.FilterBypass fb, int offset, String text, AttributeSet attrs)
                    throws BadLocationException {
                if ((fb.getDocument().getLength() + text.length()) > 8) {
                    return; 
                }
                super.insertString(fb, offset, text, attrs);
            }

            @Override
            public void replace(DocumentFilter.FilterBypass fb, int offset, int length, String text, AttributeSet attrs)
                    throws BadLocationException {
                if ((fb.getDocument().getLength() - length + text.length()) > 8) {
                    return; 
                }
                super.replace(fb, offset, length, text, attrs);
            }
        };

        JTextField textField = (JTextField) evt.getSource();
        AbstractDocument doc = (AbstractDocument) textField.getDocument();
        doc.setDocumentFilter(filter);
        
    }//GEN-LAST:event_studentIDremoveKeyPressed

    private void exitBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtn1ActionPerformed
        
        // This method closes the current window by calling the dispose method.
        this.dispose();
    }//GEN-LAST:event_exitBtn1ActionPerformed

    private void displayBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayBtn1ActionPerformed
        
        // This method is an event handler for the "ActionPerformed" event of the "displayBtn1" button.
        // It reads the contents of a text file located at the specified path and displays it in a table.
        
        String pathFile = "Student.txt"; 
        File file = new File(pathFile);
        
        try {
          FileReader fr = new FileReader(file);
          BufferedReader br = new BufferedReader(fr);
          
          DefaultTableModel model =(DefaultTableModel)jTable1.getModel();
          Object[] line = br.lines().toArray();
          
          for(int i=0; i < line.length; i++){
              String[] row = line[i].toString().split(",");
              model.addRow(row);
          }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(StudentSystemApk.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_displayBtn1ActionPerformed

    private void AddBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBtn1ActionPerformed

        // This method is an event handler for the "ActionPerformed" event of the "AddBtn1" button.
        // It retrieves the student information from text fields, validates the input, and adds the student to a text file if the input is valid.
        // The method validates the input fields, checking for errors such as invalid ID, non-numeric characters in age, and non-numeric or decimal values in grade.
        // If any errors are found, the corresponding text fields are highlighted in red, and an error message is displayed to the user.
        
        String ID = txtstudentID1.getText();
        String name = txtname1.getText();
        String age = txtage1.getText();
        String grade = txtgrade1.getText();
        String major = txtmajor1.getText();

        txtstudentID1.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
        txtname1.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
        txtage1.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
        txtgrade1.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
        txtmajor1.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));

        boolean hasError = false;

        if (!ID.matches("\\d+")) {
            txtstudentID1.setBorder(BorderFactory.createLineBorder(Color.RED));
            hasError = true;
        }
        
        if (ID.length() != 8) {
        txtstudentID1.setBorder(BorderFactory.createLineBorder(Color.RED));
        hasError = true;
        }

        if (name.matches(".*\\d.*")) {
            txtname1.setBorder(BorderFactory.createLineBorder(Color.RED));
            hasError = true;
        }

        if (!age.matches("\\d+")) {
            txtage1.setBorder(BorderFactory.createLineBorder(Color.RED));
            hasError = true;
        }

        if (!grade.matches("\\d+(\\.\\d+)?")) {
            txtgrade1.setBorder(BorderFactory.createLineBorder(Color.RED));
            hasError = true;
        }

        if (major.matches(".*\\d.*")) {
            txtmajor1.setBorder(BorderFactory.createLineBorder(Color.RED));
            hasError = true;
        }

        if (hasError) {
            JOptionPane.showMessageDialog(this, "Please correct the highlighted fields and try again");
        } else {
            try {
                File file = new File("Student.txt");
                if (isStudentAlreadyAdded(file, ID)) {
                    JOptionPane.showMessageDialog(this, "The student with ID " + ID + " is already added.");
                } else {
                    FileWriter fileWriter = new FileWriter(file, true);
                    fileWriter.write(ID + "," + name + "," + age + "," + grade + "," + major);
                    fileWriter.write(System.getProperty("line.separator"));
                    fileWriter.close();
                    JOptionPane.showMessageDialog(this, "You have successfully added the student to the system");
                    new InsertData().setVisible(true);
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "There was an error adding the student. Please try again later");
        }
    }
}

private boolean isStudentAlreadyAdded(File file, String ID) throws IOException {
    
    // This method checks if a student with the given ID already exists in the specified text file.
    // It reads the file line by line and compares the ID with the student data extracted from each line.
    // The method returns true if a matching student is found, indicating that the student is already added.
    // It returns false if no matching student is found, indicating that the student is not yet added.

    BufferedReader reader = new BufferedReader(new FileReader(file));
    String line;
    while ((line = reader.readLine()) != null) {
        String[] studentData = line.split(",");
        if (studentData.length > 0 && studentData[0].equals(ID)) {
            reader.close();
            return true;
        }
    }
    reader.close();
    return false;

    }//GEN-LAST:event_AddBtn1ActionPerformed

    private void removeBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtn1ActionPerformed
        
        /*This method is an event handler for the "ActionPerformed" event of the "removeBtn1" button.
        It prompts the user for confirmation before removing a student from the system.*/
        
        /*If the user confirms the removal, the method retrieves the entered student ID and searches for a matching student in the table.
        If a matching student is found, the corresponding row is removed from the table.
        Otherwise, an error message is displayed indicating that no student with the entered ID was found.*/
   
        int response = JOptionPane.showConfirmDialog(this, "Do you want to continue with removing the student? Please confirm.");
        if (response == JOptionPane.YES_OPTION) {
            studentManagementSystem.setText("Yes");
            String enteredID = studentIDremove.getText();

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            int rowCount = model.getRowCount();
                
            boolean found = false; 

            for (int i = 0; i < rowCount; i++) {
                Object value = model.getValueAt(i, 0);
                if (value != null && value.toString().equals(enteredID)) {
                    model.removeRow(i);
                    found = true;
                    break;
                }
            }
            studentIDremove.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));

            if (!enteredID.matches("\\d+")) {
                studentIDremove.setBorder(BorderFactory.createLineBorder(Color.RED));
                JOptionPane.showMessageDialog(this, "Please enter a valid student ID you want to remove and tyr again.");
            } else if (!found) {
                studentIDremove.setBorder(BorderFactory.createLineBorder(Color.RED));
                JOptionPane.showMessageDialog(this, "No student with the entered ID was found.");
            } else {
                String filePath = "Student.txt";
                String textToRemove = studentIDremove.getText();

                try {
                    // Read the contents of the file
                    File inputFile = new File(filePath);
                    BufferedReader reader = new BufferedReader(new FileReader(inputFile));
                    StringBuilder sb = new StringBuilder();

                    String line;
                    while ((line = reader.readLine()) != null) {
                        if (!line.contains(textToRemove)) {
                            sb.append(line).append(System.lineSeparator());
                        }
                    }
                    reader.close();

                    
                    BufferedWriter writer = new BufferedWriter(new FileWriter(inputFile));
                    writer.write(sb.toString());
                    writer.close();

                    JOptionPane.showMessageDialog(this,"You have successfully removed the student from the system");

                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, "There was an error in removing the student. Please try again later");
                }
            }
        } else if (response == JOptionPane.NO_OPTION) {
            studentManagementSystem.setText("No");
        } else if (response == JOptionPane.CANCEL_OPTION) {
            studentManagementSystem.setText("Cancel");
        }
    }//GEN-LAST:event_removeBtn1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        
        /*This method is an event handler for the "ActionPerformed" event of the "jButton4" button.
        It resets the text fields in the user interface by clearing their contents.*/
        
        AbstractDocument doc = (AbstractDocument) txtgrade1.getDocument();
        DocumentFilter oldFilter = doc.getDocumentFilter();
        doc.setDocumentFilter(null);
    
        txtstudentID1.setText("");
        txtname1.setText("");
        txtage1.setText("");
        txtgrade1.setText("");
        txtmajor1.setText("");
        studentIDremove.setText("");
        
        doc.setDocumentFilter(oldFilter);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
    
    }//GEN-LAST:event_formWindowOpened

    private void jPanel1AncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jPanel1AncestorResized
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel1AncestorResized

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        /*This method is an event handler for the "ActionPerformed" event of the "jButton1" button.
        It opens a new instance of the "StudentManagementApk1" class, displays it, and disposes the current window.*/
       
        StudentManagementApk1 f2 = new StudentManagementApk1();
        f2.show();
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        
        /*This method is an event handler for the "ActionPerformed" event of the "jComboBox1" combo box.
        It retrieves the selected item from the combo box and sets it as the text in the "txtmajor1" text field.*/
        
        String selectedItem = (String) jComboBox1.getSelectedItem();
        txtmajor1.setText(selectedItem);
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        
        /*This method is an event handler for the "ActionPerformed" event of the "refreshBtn" button.
        It clears the existing data in the table, retrieves the data from a file, and populates the table with the new data.*/
        //Clear the existing table data and retrieve data from a file to refresh the table display.

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        String pathFile = "Student.txt";
        File file = new File(pathFile);

        try {
            FileReader fr = new FileReader(file);
            BufferedReader br = new BufferedReader(fr);

            Object[] line = br.lines().toArray();

            for (int i = 0; i < line.length; i++) {
                String[] row = line[i].toString().split(",");
                model.addRow(row);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(StudentSystemApk.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_refreshBtnActionPerformed

    private void updateBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtn1ActionPerformed
        
        /*This method is an event handler for the "ActionPerformed" event of the "updateBtn1" button.
        It updates the selected row in the table with the new data entered in the text fields.
        It also updates the corresponding entry in the text file with the new data.*/
        
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to update.");
        } else {
            String newData1 = txtstudentID1.getText();
            String newData2 = txtname1.getText();
            String newData3 = txtage1.getText();
            String newData4 = txtgrade1.getText();
            String newData5 = txtmajor1.getText();

            boolean isValid = true;
            StringBuilder errorMessage = new StringBuilder("Please correct the following fields:\n");

            if (!newData1.matches("\\d+")) {
                isValid = false;
                errorMessage.append("- Student ID should contain numbers only.\n");
            }

            if (!newData2.matches("[a-zA-Z]+")) {
                isValid = false;
                errorMessage.append("- Name should contain letters only.\n");
            }

            if (!newData3.matches("\\d+")) {
                isValid = false;
                errorMessage.append("- Age should contain numbers only.\n");
            }

            if (!newData4.matches("\\d+")) {
                isValid = false;
                errorMessage.append("- Grade should contain numbers only.\n");
            }


            if (!isValid) {
                JOptionPane.showMessageDialog(this, errorMessage.toString());
            } else {
                // Update the JTable
                model.setValueAt(newData1, selectedRow, 0);
                model.setValueAt(newData2, selectedRow, 1);
                model.setValueAt(newData3, selectedRow, 2);
                model.setValueAt(newData4, selectedRow, 3);
                model.setValueAt(newData5, selectedRow, 4);

                // Update the text file
                try {
                    File file = new File("Student.txt");
                    List<String> lines = Files.readAllLines(file.toPath());
                    String line = lines.get(selectedRow);

                    String[] parts = line.split(",");
                    parts[0] = newData1;
                    parts[1] = newData2;
                    parts[2] = newData3;
                    parts[3] = newData4;
                    parts[4] = newData5;

                    line = String.join(",", parts);
                    lines.set(selectedRow, line);

                    Files.write(file.toPath(), lines);
                } catch (IOException e) {
                    e.printStackTrace();
                }

                // Clear the text fields
                txtstudentID1.setText("");
                txtname1.setText("");
                txtage1.setText("");
                txtgrade1.setText("");
                txtmajor1.setText("");

                JOptionPane.showMessageDialog(this, "Row is updated successfully.");
            }
        }
    }//GEN-LAST:event_updateBtn1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentSystemApk.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentSystemApk.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentSystemApk.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentSystemApk.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentSystemApk().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddBtn;
    private javax.swing.JButton AddBtn1;
    private javax.swing.JButton displayBtn;
    private javax.swing.JButton displayBtn1;
    private javax.swing.JButton exitBtn;
    private javax.swing.JButton exitBtn1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JButton removeBtn;
    private javax.swing.JButton removeBtn1;
    private javax.swing.JTextField studentIDremove;
    private javax.swing.JLabel studentManagementSystem;
    private javax.swing.JLabel studentManagementSystem1;
    private javax.swing.JTextField txtage1;
    private javax.swing.JTextField txtgrade1;
    private javax.swing.JTextField txtmajor1;
    private javax.swing.JTextField txtname1;
    private javax.swing.JTextField txtstudentID1;
    private javax.swing.JButton updateBtn1;
    // End of variables declaration//GEN-END:variables
}
